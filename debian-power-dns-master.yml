#   _  __                   _ _ ____             _             
#  | |/ /__ ___      ____ _(_|_)  _ \ __ _ _ __ | |_ ___ _   _ 
#  | ' // _` \ \ /\ / / _` | | | |_) / _` | '_ \| __/ __| | | |
#  | . \ (_| |\ V  V / (_| | | |  __/ (_| | | | | |_\__ \ |_| |
#  |_|\_\__,_| \_/\_/ \__,_|_|_|_|   \__,_|_| |_|\__|___/\__,_|
#                   ____  _             _                 _        
#  [   ANSIBLE   ] |  _ \| | __ _ _   _| |__   ___   ___ | | _____ 
#  Please only use | |_) | |/ _` | | | | '_ \ / _ \ / _ \| |/ / __|
#  playbooks if    |  __/| | (_| | |_| | |_) | (_) | (_) |   <\__ \
#  you know what   |_|   |_|\__,_|\__, |_.__/ \___/ \___/|_|\_\___/
#  they change/do                 |___/ 
# 
#  .---------| PowerDNS Master / Standalone server - Full setup
#  |
#  | This playbook will do the following:
#  | - Install: MariaDB, PowerDNS and PowerDNS-Admin
#  | - Basic "Master/Standalone" setup
#  | - Give you the Web UI URL to continue playing!
#  `---------------------------------------------------------------
---

- hosts: debian
  vars:
    db_pdns_master: "pdns_master"
    db_pdns_slave: "pdns_slave"
    db_powerdnsadmin: "pdns_powerdnsadmin"
    db_username: "powerdns"

  tasks:
    - name: Create random SECRET for PowerDNS Admin
      ansible.builtin.set_fact:
        pda_secret: "{{ lookup('ansible.builtin.password', '/dev/null', chars=['ascii_letters', 'digits', '-'], length=20) }}"

    - name: Create random password for database user
      ansible.builtin.set_fact:
        db_password: "{{ lookup('ansible.builtin.password', '/dev/null', chars=['ascii_letters', 'digits', '-'], length=20) }}"

    - name: Create random API-SECRET for PowerDNS API / Power-Admin
      ansible.builtin.set_fact:
        api_secret: "{{ lookup('ansible.builtin.password', '/dev/null', chars=['hexdigits' '-'], length=40) }}"

    - name: Create random password for web admin user
      ansible.builtin.set_fact:
        admin_password: "{{ lookup('ansible.builtin.password', '/dev/null', chars=['ascii_letters', 'digits'], length=10) }}"

      - name: Prepare for YARN packages 
        shell: |
          curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | gpg --dearmor | tee /usr/share/keyrings/yarnkey.gpg >/dev/null
          echo "deb [signed-by=/usr/share/keyrings/yarnkey.gpg] https://dl.yarnpkg.com/debian stable main" | tee /etc/apt/sources.list.d/yarn.list

    - name: Grab needed packages
      register: updatesys
      apt:
        update_cache: yes
        force_apt_get: yes
        name:
          - mariadb
          - libmysqlclient-dev
          - nodejs
          - yarn
          - python3-dev
          - git
          - libsasl2-dev
          - libldap2-dev
          - python3-venv
          - libmariadb-dev
          - pkg-config
          - build-essential
          - curl
          - libpq-dev
          - pdns-server
          - pdns-recursor
          - pdns-tools
          - pdns-ixfrdist
          - pdns-backend-mysql
          - dnsdbq
        state: latest

    - name: Create Main PowerDNS Databases
      community.mysql.mysql_db:
        name:
          - "{{ db_pdns_master }}"
          - "{{ db_pdns_slave }}"
          - "{{ db_powerdnsadmin }}"
        state: present

    - name: Build PowerDNS database from schema (Master database)
      community.mysql.mysql_db:
        name: "{{ db_pdns_master }}"
        state: import
        target: /usr/share/pdns-backend-mysql/schema/schema.mysql.sql

    - name: Build PowerDNS database from schema (Slave database)
      community.mysql.mysql_db:
        name: "{{ db_pdns_slave }}"
        state: import
        target: /usr/share/pdns-backend-mysql/schema/schema.mysql.sql

    - name: Create Main PowerDNS Database user for all related databases
      community.mysql.mysql_user:
        state: present
        name: "{{ db_username }}"
        password: "{{ db_password }}"
        priv:
          "{{ db_pdns_master }}.*": "ALL,GRANT"
          "{{ db_pdns_slave }}.*": "ALL,GRANT"
          "{{ db_powerdnsadmin }}.*": "ALL,GRANT"

    - name: Generate gmysql configuration file.
      template:
        src: "pdns.local.gmysql.conf.j2"
        dest: "/etc/powerdns/pdns.d/pdns.local.gmysql.conf"
        owner: pdns
        group: root
        mode: 640

    - name: Install PowerDNS-Admin 
      shell: |
        git clone https://github.com/PowerDNS-Admin/PowerDNS-Admin.git /opt/powerdns-admin
        cd /opt/powerdns-admin
        python3 -mvenv ./venv
        source ./venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements.txt
        pip uninstall itsdangerous
        pip install  itsdangerous==2.0.1
        cp /opt/powerdns-admin/configs/development.py /opt/powerdns-admin/configs/production.py
        chown -R pdns:root /opt/powerdns-admin

    - name: Generate powerdns-admin configuration file.
      template:
        src: "powerdns.admin.config.py.j2"
        dest: "/opt/powerdns-admin/configs/production.py"
        owner: pdns
        group: root
        mode: 640

    - name: PowerDNS-Admin initiate DB 
      shell: |
        export FLASK_CONF=/opt/powerdns-admin/configs/production.py
        cd /opt/powerdns-admin
        source ./flask/bin/activate
        export FLASK_APP=powerdnsadmin/__init__.py
        flask db upgrade

    - name: PowerDNS-Admin generate assets 
      shell: |
        export FLASK_CONF=/opt/powerdns-admin/configs/production.py
        cd /opt/powerdns-admin
        yarn install --pure-lockfile
        flask assets build

    - name: Generate systemd powerdns-admin service
      template:
        src: "powerdnsadmin.systemd.service.j2"
        dest: "/etc/systemd/system/powerdns-admin.service"
        mode: 644

    - name: PowerDNS - Enable API Access
      lineinfile:
        path: /etc/powerdns/pdns.conf
        state: present
        regexp: '^#?api='
        line: 'api=yes'

    - name: PowerDNS - Set API Access KEY
      lineinfile:
        path: /etc/powerdns/pdns.conf
        state: present
        regexp: '^#?api-key='
        line: 'api-key={{ api_secret }}'

    - name: Enable service powerdns and start it
      ansible.builtin.systemd:
        daemon_reload: true
        name: pdns.service
        enabled: true
        masked: no
        state: started

    - name: Enable service powerdns and start it
      ansible.builtin.systemd:
        daemon_reload: true
        name: pdns-recursor.service
        enabled: true
        masked: no
        state: started

    - name: Enable service powerdns-admin and start it
      ansible.builtin.systemd:
        daemon_reload: true
        name: powerdns-admin.service
        enabled: true
        masked: no
        state: started

    - name: FINISHED SETUP - DETAILED INFORMATION - KEEP SAFE
      ansible.builtin.debug:
        msg:
          - " === PowerDNS INFO "
          - " "
          - "PowerDNS + DB installed on.: {{ ansible_hostname }}"
          - "PowerDNS API access on.....: {{ ansible_default_ipv4.address }}"
          - "PowerDNS API SECRET is.....: {{ api_secret }}"
          - " "
          - " === PowerDNS-ADMIN INFO "
          - " "
          - "PowerDNS-Admin running on..: http://{{ ansible_default_ipv4.address }}:9191/"
          - "PowerDNS-Admin SECRET......: {{ pda_secret }}"
          - " "
          - " === DATABASE INFO "
          - " "
          - "DB Username................: {{ db_username }}"
          - "DB Password................: {{ db_password }}"
          - "DB PDNS DB.................: {{ db_pdns_master }}"
          - "DB PDNS DB...(not used)....: {{ db_pdns_slave }}"
          - "DB PDNS-ADMIN DB...........: {{ db_powerdnsadmin }}"
          - " "
          - " === QUICK HELP INFO (Use if wanted)"
          - " "
          - "Random password............: {{ admin_password }}"
